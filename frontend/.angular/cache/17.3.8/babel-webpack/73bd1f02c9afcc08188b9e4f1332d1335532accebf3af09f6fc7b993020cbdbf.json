{"ast":null,"code":"import { FormsModule } from '@angular/forms';\nimport { NgIf } from \"@angular/common\";\nimport { Subscription, timer, interval } from 'rxjs';\nimport { ButtonModule } from 'primeng/button';\nimport { SelectButtonModule } from 'primeng/selectbutton';\nimport { InputNumberModule } from 'primeng/inputnumber';\nimport { InputTextModule } from 'primeng/inputtext';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../SharedWebSocket.service\";\nimport * as i3 from \"../ConnectionStatus/ConnectionStatus.service\";\nimport * as i4 from \"../Notifications/Notification.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/selectbutton\";\nimport * as i8 from \"primeng/inputnumber\";\nimport * as i9 from \"primeng/inputtext\";\nfunction deviceStatusComponent_p_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 33);\n    i0.ɵɵlistener(\"click\", function deviceStatusComponent_p_button_5_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.connectBer());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r1.loadingBer);\n  }\n}\nfunction deviceStatusComponent_p_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 34);\n    i0.ɵɵlistener(\"click\", function deviceStatusComponent_p_button_6_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.disconnectBer());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r1.loadingBer);\n  }\n}\nfunction deviceStatusComponent_p_button_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 33);\n    i0.ɵɵlistener(\"click\", function deviceStatusComponent_p_button_18_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.connectAtt());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r1.loadingAtt);\n  }\n}\nfunction deviceStatusComponent_p_button_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 34);\n    i0.ɵɵlistener(\"click\", function deviceStatusComponent_p_button_19_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.disconnectAtt());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r1.loadingAtt);\n  }\n}\nfunction deviceStatusComponent_p_button_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 33);\n    i0.ɵɵlistener(\"click\", function deviceStatusComponent_p_button_24_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.connectStat());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r1.loadingStat);\n  }\n}\nfunction deviceStatusComponent_p_button_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 34);\n    i0.ɵɵlistener(\"click\", function deviceStatusComponent_p_button_25_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.disconnectStat());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r1.loadingStat);\n  }\n}\nfunction deviceStatusComponent_p_button_66_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 33);\n    i0.ɵɵlistener(\"click\", function deviceStatusComponent_p_button_66_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.connectM3M());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r1.loadingM3M);\n  }\n}\nfunction deviceStatusComponent_p_button_67_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 34);\n    i0.ɵɵlistener(\"click\", function deviceStatusComponent_p_button_67_Template_p_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.disconnectM3M());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"loading\", ctx_r1.loadingM3M);\n  }\n}\nexport let deviceStatusComponent = /*#__PURE__*/(() => {\n  class deviceStatusComponent {\n    constructor(http, sharedWebSocketService, sharedService, notificationService, cdr) {\n      this.http = http;\n      this.sharedWebSocketService = sharedWebSocketService;\n      this.sharedService = sharedService;\n      this.notificationService = notificationService;\n      this.cdr = cdr;\n      this.bercutConnected = false;\n      this.attConnected = false;\n      this.statConnected = false;\n      this.M3MConnected = false;\n      this.stationOptions = [{\n        label: '10 МГц',\n        value: '3'\n      }, {\n        label: '20 МГц',\n        value: '5'\n      }];\n      this.inputIP_BASE = '';\n      this.inputIP_ABONENT = '';\n      this.errorMessage = null;\n      this.inputFrequency = '';\n      this.selectionBandwidth = '';\n      this.inputAttenuation = '';\n      this.inputCommandBer = '';\n      this.inputOffset = '';\n      this.loadingAtt = false;\n      this.loadingBer = false;\n      this.loadingStat = false;\n      this.loadingStatIp = false;\n      this.loadingStatParams = false;\n      this.loadingM3M = false;\n      this.loadingM3Msend = false;\n      this.subscription = new Subscription();\n    }\n    ngOnInit() {\n      //    this.subscription.add(this.sharedWebSocketService.getMessages().subscribe(message => {\n      //     if (message.deviceId === \"attenuator\" && message.type === \"is-connected\" && message.isConnected == true) {\n      //       this.attConnected = true;\n      //     }\n      //     else if (message.deviceId === \"attenuator\" && message.type === \"is-connected\" && message.isConnected == false) {\n      //       this.notificationService.showNotification('Аттенюатор отключился ');\n      //      // this.subscription.unsubscribe();\n      //       this.attConnected = false;\n      //     }\n      //     else if (message.deviceId === \"bercut\" && message.type === \"is-connected\" &&  message.isConnected == true) {\n      //       this.bercutConnected = true;\n      //     }\n      //     else if (message.deviceId === \"bercut\" && message.type === \"is-connected\" &&  message.isConnected == false) {\n      //       this.notificationService.showNotification('Беркут-ЕТ отключился ');\n      //       //this.sharedService.stopSendingMessagesAtt();\n      //       //this.subscription.unsubscribe();\n      //       this.bercutConnected = false;\n      //     }\n      //     this.cdr.detectChanges();\n      // }));\n      // this.subscription = this.sharedService.ber$.subscribe(ber => {\n      //   ber = this.bercutConnected;\n      // });\n      // this.subscription = this.sharedService.att$.subscribe(att => {\n      // });\n      this.startSendingMessages();\n    }\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n    startSendingMessages() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n      this.subscription = interval(5000).subscribe(() => {\n        const message = {\n          \"type\": \"is-connected\",\n          \"ber\": this.bercutConnected,\n          \"att\": this.attConnected,\n          \"stat\": this.statConnected,\n          \"M3M\": this.M3MConnected\n        };\n        this.sharedWebSocketService.sendMessage(message);\n      });\n      this.sharedWebSocketService.getMessages().subscribe(message_ => {\n        if (message_.type === \"is-connected\") {\n          if (message_.pingBert == false && this.bercutConnected == true) {\n            this.loadingBer = false;\n            this.bercutConnected = false;\n            this.sharedService.updateStatus(\"ber\", this.bercutConnected);\n          }\n          if (message_.pingAtt == false && this.attConnected == true) {\n            this.loadingAtt = false;\n            this.attConnected = false;\n            this.sharedService.updateStatus(\"att\", this.attConnected);\n          }\n          if ((message_.isStat0 == false || message_.isStat1 == false) && this.statConnected == true) {\n            this.loadingStat = false;\n            this.statConnected = false;\n            this.sharedService.updateStatus(\"stat\", this.statConnected);\n          }\n          //this.sharedService.updateStatus(message_);\n          this.cdr.detectChanges();\n        }\n      });\n    }\n    load(property) {\n      this[property] = true;\n      setTimeout(() => {\n        this[property] = false;\n      }, 3000);\n    }\n    connectBer() {\n      this.loadingBer = true;\n      const message = {\n        \"type\": \"connect\",\n        \"deviceId\": \"bercut\"\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingBer = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"connect\" && message.deviceId === \"bercut\" && message.conStatus == true) {\n          this.loadingBer = false;\n          this.bercutConnected = true;\n          //this.sharedService.startSendingMessagesBer(); // Начинаем опрос устройства\n          //this.sharedService.setBer(true);\n          this.sharedService.updateStatus(\"ber\", this.bercutConnected);\n          this.cdr.detectChanges();\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingBer = false;\n          this.bercutConnected = false;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingBer = false;\n        this.notificationService.showNotification('Ошибка подключения к Беркут-ЕТ');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n    }\n    disconnectBer() {\n      this.loadingBer = true;\n      const message = {\n        \"type\": \"disconnect\",\n        \"deviceId\": \"bercut\"\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingBer = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"disconnect\" && message.deviceId === \"bercut\") {\n          this.loadingBer = false;\n          this.bercutConnected = false;\n          this.sharedService.updateStatus(\"ber\", this.bercutConnected);\n          this.cdr.detectChanges();\n          //this.sharedService.stopSendingMessagesAtt(); // Останавливаем опрос устройства\n          //this.sharedService.setBer(false);\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingBer = false;\n          this.bercutConnected = true;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingBer = false;\n        this.notificationService.showNotification('Ошибка отключения от Беркут-ЕТ');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription); // Добавляем подписку в общий объект подписок\n    }\n    connectAtt() {\n      this.loadingAtt = true;\n      const message = {\n        \"type\": \"connect\",\n        \"deviceId\": \"attenuator\"\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingAtt = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"connect\" && message.deviceId === \"attenuator\" && message.conStatus == true) {\n          this.loadingAtt = false;\n          this.attConnected = true;\n          this.sharedService.updateStatus(\"att\", this.attConnected);\n          this.cdr.detectChanges();\n          //this.sharedService.setAtt(true);\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingAtt = false;\n          this.attConnected = false;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingAtt = false;\n        this.notificationService.showNotification('Ошибка подключения к аттенюатору');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n    }\n    disconnectAtt() {\n      this.loadingAtt = true;\n      const message = {\n        \"type\": \"disconnect\",\n        \"deviceId\": \"attenuator\"\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingAtt = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"disconnect\" && message.deviceId === \"attenuator\") {\n          this.loadingAtt = false;\n          this.attConnected = false;\n          this.sharedService.updateStatus(\"att\", this.attConnected);\n          this.cdr.detectChanges();\n          //this.sharedService.stopSendingMessagesAtt();\n          //this.sharedService.setAtt(false);\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingAtt = false;\n          this.attConnected = true;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingAtt = false;\n        this.notificationService.showNotification('Ошибка отключения от аттенюатора');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n    }\n    connectStat() {\n      this.loadingStat = true;\n      const message = {\n        \"type\": \"connect\",\n        \"deviceId\": \"stat\"\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingStat = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"connect\" && message.deviceId === \"stat\" && message.conStatus == true) {\n          this.loadingStat = false;\n          this.statConnected = true;\n          this.sharedService.updateStatus(\"stat\", this.statConnected);\n          this.cdr.detectChanges();\n          //this.sharedService.setAtt(true);\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingStat = false;\n          this.statConnected = false;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingStat = false;\n        this.notificationService.showNotification('Ошибка подключения к cтанциям');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n    }\n    disconnectStat() {\n      this.loadingStat = true;\n      const message = {\n        \"type\": \"disconnect\",\n        \"deviceId\": \"stat\"\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingStat = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"disconnect\" && message.deviceId === \"stat\") {\n          this.loadingStat = false;\n          this.statConnected = false;\n          this.sharedService.updateStatus(\"stat\", this.statConnected);\n          this.cdr.detectChanges();\n          //this.sharedService.stopSendingMessagesAtt();\n          //this.sharedService.setAtt(false);\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingStat = false;\n          this.statConnected = true;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingStat = false;\n        this.notificationService.showNotification('Ошибка отключения от станций');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n    }\n    connectM3M() {\n      this.loadingM3M = true;\n      const message = {\n        \"type\": \"connect\",\n        \"deviceId\": \"m3m\"\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingM3M = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"connect\" && message.deviceId === \"m3m\" && message.conStatus == true) {\n          this.loadingM3M = false;\n          this.M3MConnected = true;\n          this.sharedService.updateStatus(\"m3m\", this.M3MConnected);\n          this.cdr.detectChanges();\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingM3M = false;\n          this.M3MConnected = false;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingM3M = false;\n        this.notificationService.showNotification('Ошибка подключения к M3M');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n    }\n    disconnectM3M() {\n      this.loadingM3M = true;\n      const message = {\n        \"type\": \"disconnect\",\n        \"deviceId\": \"m3m\"\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingM3M = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"disconnect\" && message.deviceId === \"m3m\") {\n          this.loadingM3M = false;\n          this.M3MConnected = false;\n          this.sharedService.updateStatus(\"m3m\", this.M3MConnected);\n          this.cdr.detectChanges();\n          //this.sharedService.stopSendingMessagesAtt();\n          //this.sharedService.setAtt(false);\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingM3M = false;\n          this.M3MConnected = true;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingM3M = false;\n        this.notificationService.showNotification('Ошибка отключения от M3M');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n    }\n    sendCommandAtt() {\n      const message = {\n        \"type\": \"send-command\",\n        \"deviceId\": \"attenuator\",\n        \"value\": `${this.inputAttenuation}`\n      };\n      console.log('message');\n      this.sharedService.changeAttenuationAttStatus(`${this.inputAttenuation}`);\n      this.sharedWebSocketService.sendMessage(message);\n      console.log('zalupa');\n    }\n    sendCommandBer() {\n      const message = {\n        \"type\": \"send-command\",\n        \"deviceId\": \"bercut\",\n        \"command\": `${this.inputCommandBer}`\n      };\n      console.log('message');\n      this.sharedService.changeAttenuationAttStatus(\"44\");\n      this.sharedWebSocketService.sendMessage(message);\n      console.log('zalupa');\n    }\n    sendOID() {\n      this.loadingStatParams = true;\n      const InputedParams = {\n        frequency: this.inputFrequency,\n        width: this.selectionBandwidth\n      };\n      const message = {\n        \"type\": \"send-command\",\n        \"deviceId\": \"stantion\",\n        \"command\": InputedParams\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingStatParams = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"sended\" && message.deviceId === \"stat\") {\n          this.loadingStatParams = false;\n          //this.attConnected = false;\n          this.sharedService.changeOidParamsStatus(InputedParams.frequency, InputedParams.width);\n          this.cdr.detectChanges();\n          //this.sharedService.stopSendingMessagesAtt();\n          //this.sharedService.setAtt(false);\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingStatParams = false;\n          //this.attConnected = true;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingStatParams = false;\n        this.notificationService.showNotification('Ошибка отправки параметров к станциям');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n    }\n    sendIP() {\n      const InputedParamsIP = {\n        baseIP: this.inputIP_BASE,\n        abonentIP: this.inputIP_ABONENT\n      };\n      const isBaseValid = this.validateIpAddress(this.inputIP_BASE);\n      const isAbonentValid = this.validateIpAddress(this.inputIP_ABONENT);\n      if (!isBaseValid || !isAbonentValid) {\n        this.notificationService.showNotification('Некорректный ввод IP адресов для станций ');\n        return;\n      }\n      this.loadingStatIp = true;\n      const message = {\n        \"type\": \"send-command\",\n        \"deviceId\": \"stantion\",\n        \"command\": InputedParamsIP\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingStatIp = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"sended\" && message.deviceId === \"stat\") {\n          this.loadingStatIp = false;\n          this.sharedService.changeIpParamsStatus(InputedParamsIP.baseIP, InputedParamsIP.abonentIP);\n          this.cdr.detectChanges();\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingStatIp = false;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingStatIp = false;\n        this.notificationService.showNotification('Ошибка отправки параметров к станциям');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n      // this.http.post(url, InputedParamsIP, { responseType: 'json' }).subscribe(\n      //   (response) => {\n      //     console.log(\"IP адреса станций успешно установлены\");\n      //     this.sharedService.changeIpParamsStatus(InputedParamsIP.baseIP, InputedParamsIP.abonentIP);\n      //   },\n      //   (error) => {\n      //     console.error('Ошибка запроса: ', error.message);\n      //   }\n      // );\n    }\n    validateIpAddress(ip) {\n      const ipPattern = /^(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}$/;\n      return ipPattern.test(ip);\n    }\n    swapMode() {\n      const temp = this.inputIP_BASE;\n      this.inputIP_BASE = this.inputIP_ABONENT;\n      this.inputIP_ABONENT = temp;\n      this.cdr.detectChanges();\n      console.log('Роли сменены: BASE ->', this.inputIP_BASE, ', ABONENT ->', this.inputIP_ABONENT);\n    }\n    sendM3M() {\n      const InputedParamsM3M = {\n        offset: this.inputOffset\n      };\n      this.loadingM3Msend = true;\n      const message = {\n        \"type\": \"send-command\",\n        \"deviceId\": \"m3m\",\n        \"command\": InputedParamsM3M\n      };\n      this.sharedWebSocketService.sendMessage(message);\n      const timeout = timer(5000).subscribe(() => {\n        this.loadingM3Msend = false;\n        timeout.unsubscribe();\n      });\n      let subscription = this.sharedWebSocketService.getMessages().subscribe(message => {\n        if (message.type === \"sended\" && message.deviceId === \"m3m\") {\n          this.loadingM3Msend = false;\n          this.sharedService.changeOffsetM3MStatus(InputedParamsM3M.offset);\n          this.cdr.detectChanges();\n          subscription.unsubscribe();\n          timeout.unsubscribe();\n        } else {\n          this.loadingM3Msend = false;\n          this.cdr.detectChanges();\n        }\n      }, error => {\n        this.loadingM3Msend = false;\n        this.notificationService.showNotification('Ошибка отправки компенсации к M3M');\n        this.cdr.detectChanges();\n        subscription.unsubscribe();\n        timeout.unsubscribe();\n      });\n      this.subscription.add(subscription);\n      // this.http.post(url, InputedParamsM3M, { responseType: 'json' }).subscribe(\n      //   (response) => {\n      //     this.sharedService.changeOffsetM3MStatus(InputedParamsM3M.offset);\n      //     //this.sharedService.updateM3MStatus('Подключено');\n      //     console.log(\"Ослабление M3M успешно отправлено\");\n      //   },\n      //   (error) => {\n      //     console.error('Ошибка запроса: ', error.message);\n      //   }\n      // );\n    }\n    static #_ = this.ɵfac = function deviceStatusComponent_Factory(t) {\n      return new (t || deviceStatusComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SharedWebSocketService), i0.ɵɵdirectiveInject(i3.SharedService), i0.ɵɵdirectiveInject(i4.NotificationService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: deviceStatusComponent,\n      selectors: [[\"app-deviceStatus\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 76,\n      vars: 21,\n      consts: [[1, \"overflow-y-auto\", \"h-90\"], [1, \"Bercut-content\", \"mt-2\", \"max-w-lg\", \"mx-0\", \"p-4\", \"border\", \"rounded-lg\", \"shadow-md\", \"mb-6\"], [1, \"text-xl\", \"font-semibold\", \"mb-4\"], [1, \"buttons-wrap\", \"flex\", \"space-x-2\", \"mb-4\"], [\"label\", \"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C\\u0441\\u044F\", \"icon\", \"pi pi-times\", 3, \"loading\", \"click\", 4, \"ngIf\"], [\"label\", \"\\u041E\\u0442\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C\\u0441\\u044F\", \"icon\", \"pi pi-times\", \"severity\", \"danger\", 3, \"loading\", \"click\", 4, \"ngIf\"], [1, \"form-group\"], [\"for\", \"inputCommandBer\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"type\", \"text\", \"id\", \"inputCommandBer\", \"placeholder\", \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043A\\u043E\\u043C\\u043C\\u0430\\u043D\\u0434\\u0443\", 1, \"w-full\", \"px-3\", \"py-2\", \"border\", \"rounded\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-blue-500\", 3, \"ngModelChange\", \"ngModel\"], [1, \"mt-4\"], [\"type\", \"button\", 1, \"bg-green-500\", \"hover:bg-green-700\", \"text-white\", \"font-bold\", \"text-sm\", \"py-1\", \"px-2\", \"rounded\", 3, \"click\"], [1, \"Bercut-content\", \"max-w-lg\", \"mx-0\", \"p-4\", \"border\", \"rounded-lg\", \"shadow-md\", \"mb-6\"], [1, \"buttons-wrap\", \"flex\", \"space-x-2\"], [3, \"ngSubmit\"], [1, \"space-y-4\"], [1, \"card\", \"flex\", \"flex-wrap\", \"gap-3\", \"p-fluid\"], [1, \"flex-auto\"], [\"for\", \"inputFrequency\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"inputId\", \"inputFrequency\", \"placeholder\", \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0447\\u0430\\u0441\\u0442\\u043E\\u0442\\u0443\", 3, \"ngModelChange\", \"ngModel\"], [1, \"card\", \"justify-content-center\"], [\"for\", \"selectionBandwidth\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"optionLabel\", \"label\", \"optionValue\", \"value\", \"id\", \"selectionBandwidth\", 3, \"ngModelChange\", \"options\", \"ngModel\"], [1, \"buttons-wrap\", \"mt-4\"], [\"label\", \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\", \"type\", \"submit\", \"icon\", \"pi pi-times\", \"severity\", \"success\", 3, \"disabled\", \"loading\"], [1, \"text-xl\", \"font-semibold\", \"mt-4\", \"mb-4\"], [\"for\", \"inputIP_BASE\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"type\", \"text\", \"name\", \"inputIP_BASE\", \"pInputText\", \"\", \"inputId\", \"inputIP_BASE\", \"placeholder\", \"192.168.0.1\", 1, \"mb-3\", \"px-3\", \"py-2\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"inputIP_ABONENT\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"type\", \"text\", \"name\", \"inputIP_ABONENT\", \"pInputText\", \"\", \"inputId\", \"inputIP_ABONENT\", \"placeholder\", \"192.168.0.2\", 1, \"mb-3\", \"px-3\", \"py-2\", 3, \"ngModelChange\", \"ngModel\"], [\"label\", \"\\u0421\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0440\\u043E\\u043B\\u0438\", \"severity\", \"danger\", 3, \"click\"], [\"id\", \"M3M\", 1, \"Bercut-content\", \"max-w-lg\", \"mx-0\", \"p-4\", \"border\", \"rounded-lg\", \"shadow-md\", \"mb-6\"], [\"for\", \"inputOffset\", 1, \"block\", \"text-sm\", \"font-medium\", \"text-gray-700\"], [\"inputId\", \"inputOffset\", \"placeholder\", \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043A\\u043E\\u043C\\u043F\\u0435\\u043D\\u0441\\u0430\\u0446\\u0438\\u044E \\u043E\\u0441\\u043B\\u0430\\u0431\\u043B\\u0435\\u043D\\u0438\\u044F\", 3, \"ngModelChange\", \"ngModel\"], [\"label\", \"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C\\u0441\\u044F\", \"icon\", \"pi pi-times\", 3, \"click\", \"loading\"], [\"label\", \"\\u041E\\u0442\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C\\u0441\\u044F\", \"icon\", \"pi pi-times\", \"severity\", \"danger\", 3, \"click\", \"loading\"]],\n      template: function deviceStatusComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2);\n          i0.ɵɵtext(3, \"\\u0411\\u0435\\u0440\\u043A\\u0443\\u0442-\\u0415\\u0422\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3);\n          i0.ɵɵtemplate(5, deviceStatusComponent_p_button_5_Template, 1, 1, \"p-button\", 4)(6, deviceStatusComponent_p_button_6_Template, 1, 1, \"p-button\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n          i0.ɵɵtext(9, \"\\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0430 \\u0434\\u043B\\u044F \\u0443\\u0441\\u0442\\u0440\\u043E\\u0439\\u0441\\u0442\\u0432\\u0430:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"input\", 8);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function deviceStatusComponent_Template_input_ngModelChange_10_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.inputCommandBer, $event) || (ctx.inputCommandBer = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"div\", 9)(12, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function deviceStatusComponent_Template_button_click_12_listener() {\n            return ctx.sendCommandBer();\n          });\n          i0.ɵɵtext(13, \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0443\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"div\", 11)(15, \"h2\", 2);\n          i0.ɵɵtext(16, \"\\u0410\\u0442\\u0442\\u0435\\u043D\\u044E\\u0430\\u0442\\u043E\\u0440\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"div\", 12);\n          i0.ɵɵtemplate(18, deviceStatusComponent_p_button_18_Template, 1, 1, \"p-button\", 4)(19, deviceStatusComponent_p_button_19_Template, 1, 1, \"p-button\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(20, \"div\", 11)(21, \"h2\", 2);\n          i0.ɵɵtext(22, \"\\u041F\\u0430\\u0440\\u0430\\u043C\\u0435\\u0442\\u0440\\u044B \\u0441\\u0442\\u0430\\u043D\\u0446\\u0438\\u0439\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"div\", 3);\n          i0.ɵɵtemplate(24, deviceStatusComponent_p_button_24_Template, 1, 1, \"p-button\", 4)(25, deviceStatusComponent_p_button_25_Template, 1, 1, \"p-button\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"form\", 13);\n          i0.ɵɵlistener(\"ngSubmit\", function deviceStatusComponent_Template_form_ngSubmit_26_listener() {\n            return ctx.sendOID();\n          });\n          i0.ɵɵelementStart(27, \"div\", 14)(28, \"div\", 15)(29, \"div\", 16)(30, \"label\", 17);\n          i0.ɵɵtext(31, \"\\u0427\\u0430\\u0441\\u0442\\u043E\\u0442\\u0430 \\u0441\\u0442\\u0430\\u043D\\u0446\\u0438\\u0439, \\u041A\\u0413\\u0446:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"p-inputNumber\", 18);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function deviceStatusComponent_Template_p_inputNumber_ngModelChange_32_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.inputFrequency, $event) || (ctx.inputFrequency = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(33, \"div\", 19)(34, \"label\", 20);\n          i0.ɵɵtext(35, \"\\u0428\\u0438\\u0440\\u0438\\u043D\\u0430 \\u043F\\u043E\\u043B\\u043E\\u0441\\u044B, \\u041C\\u0413\\u0446:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"p-selectButton\", 21);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function deviceStatusComponent_Template_p_selectButton_ngModelChange_36_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.selectionBandwidth, $event) || (ctx.selectionBandwidth = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(37, \"div\", 22);\n          i0.ɵɵelement(38, \"p-button\", 23);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(39, \"h2\", 24);\n          i0.ɵɵtext(40, \"IP \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430 \\u0441\\u0442\\u0430\\u043D\\u0446\\u0438\\u0439\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"form\", 13);\n          i0.ɵɵlistener(\"ngSubmit\", function deviceStatusComponent_Template_form_ngSubmit_41_listener() {\n            return ctx.sendIP();\n          });\n          i0.ɵɵelementStart(42, \"div\", 6)(43, \"div\", 15)(44, \"div\", 16)(45, \"label\", 25);\n          i0.ɵɵtext(46, \"IP \\u0430\\u0434\\u0440\\u0435\\u0441 \");\n          i0.ɵɵelementStart(47, \"strong\");\n          i0.ɵɵtext(48, \"\\u0411\\u0430\\u0437\\u044B\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(49, \":\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(50, \"input\", 26);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function deviceStatusComponent_Template_input_ngModelChange_50_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.inputIP_BASE, $event) || (ctx.inputIP_BASE = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(51, \"div\", 15)(52, \"div\", 16)(53, \"label\", 27);\n          i0.ɵɵtext(54, \"IP \\u0430\\u0434\\u0440\\u0435\\u0441 \");\n          i0.ɵɵelementStart(55, \"strong\");\n          i0.ɵɵtext(56, \"\\u0410\\u0431\\u043E\\u043D\\u0435\\u043D\\u0442\\u0430\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(57, \":\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(58, \"input\", 28);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function deviceStatusComponent_Template_input_ngModelChange_58_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.inputIP_ABONENT, $event) || (ctx.inputIP_ABONENT = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(59, \"div\", 12);\n          i0.ɵɵelement(60, \"p-button\", 23);\n          i0.ɵɵelementStart(61, \"p-button\", 29);\n          i0.ɵɵlistener(\"click\", function deviceStatusComponent_Template_p_button_click_61_listener() {\n            return ctx.swapMode();\n          });\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(62, \"div\", 30)(63, \"h2\", 2);\n          i0.ɵɵtext(64, \"\\u0418\\u0437\\u043C\\u0435\\u0440\\u0438\\u0442\\u0435\\u043B\\u044C \\u043C\\u043E\\u0449\\u043D\\u043E\\u0441\\u0442\\u0438 M3M\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(65, \"div\", 3);\n          i0.ɵɵtemplate(66, deviceStatusComponent_p_button_66_Template, 1, 1, \"p-button\", 4)(67, deviceStatusComponent_p_button_67_Template, 1, 1, \"p-button\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(68, \"form\", 13);\n          i0.ɵɵlistener(\"ngSubmit\", function deviceStatusComponent_Template_form_ngSubmit_68_listener() {\n            return ctx.sendM3M();\n          });\n          i0.ɵɵelementStart(69, \"div\", 15)(70, \"div\", 16)(71, \"label\", 31);\n          i0.ɵɵtext(72, \"\\u041A\\u043E\\u043C\\u043F\\u0435\\u043D\\u0441\\u0430\\u0446\\u0438\\u044F \\u043E\\u0441\\u043B\\u0430\\u0431\\u043B\\u0435\\u043D\\u0438\\u044F, \\u0434\\u0411:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(73, \"p-inputNumber\", 32);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function deviceStatusComponent_Template_p_inputNumber_ngModelChange_73_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.inputOffset, $event) || (ctx.inputOffset = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(74, \"div\", 22);\n          i0.ɵɵelement(75, \"p-button\", 23);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", !ctx.bercutConnected);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.bercutConnected);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.inputCommandBer);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngIf\", !ctx.attConnected);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.attConnected);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", !ctx.statConnected);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.statConnected);\n          i0.ɵɵadvance(7);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.inputFrequency);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"options\", ctx.stationOptions);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.selectionBandwidth);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.statConnected)(\"loading\", ctx.loadingStatParams);\n          i0.ɵɵadvance(12);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.inputIP_BASE);\n          i0.ɵɵadvance(8);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.inputIP_ABONENT);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.statConnected)(\"loading\", ctx.loadingStatIp);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", !ctx.M3MConnected);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.M3MConnected);\n          i0.ɵɵadvance(6);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.inputOffset);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", !ctx.M3MConnected)(\"loading\", ctx.loadingM3Msend);\n        }\n      },\n      dependencies: [FormsModule, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.NgModel, i5.NgForm, NgIf, ButtonModule, i6.Button, SelectButtonModule, i7.SelectButton, InputNumberModule, i8.InputNumber, InputTextModule, i9.InputText],\n      styles: [\".Bercut-content[_ngcontent-%COMP%]{margin:20px;padding:20px;border:1px solid #ccc;border-radius:8px;background-color:#fff;box-shadow:0 2px 4px #0000001a}\"]\n    });\n  }\n  return deviceStatusComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}