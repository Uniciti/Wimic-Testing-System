import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs";

@Injectable ({
    providedIn: 'root'
})

export class SettingsService {
  private settingsSubject = new BehaviorSubject<any>(null);
  settings$ = this.settingsSubject.asObservable();

  updateSettings(settings: any) {
    this.settingsSubject.next(settings);
  }

  getSettings() {
    return this.settingsSubject.value;
  }
    
}

export class mainTestsComponent implements OnInit, OnDestroy {

  mainTestsData: any = {};

  loadingTest: boolean = false;
  TestProcessing: boolean = false;
  interval: any;
  modulation: number = 0;
  currentStageQueue: number = 0;

  routerSubscription: Subscription = new Subscription();

  pa1: number | null = null;
  pa2: number | null = null;
  splitterM3M: number | null = null;
  splitterST: number | null = null;
  cable1: number | null = null;
  cable2: number | null = null;
  cable3: number | null = null;

  get settingsData() {
    return {
    Attenuator_PA1: this.pa1,
    Attenuator_PA2: this.pa2,
    splitter_to_M3M: this.splitterM3M,
    splitter_straight: this.splitterST,
    cable1: this.cable1,
    cable2: this.cable2,
    cable3: this.cable3
    };
  }

  massiveTests: any[] = [];
  
  modulationOptions: any[] = [
    { label: 'BPSK 1/2', value: 0 },
    { label: 'QPSK 1/2', value: 1 },
    { label: 'QPSK 3/4', value: 2 },
    { label: 'QPSK16 1/2', value: 3 },
    { label: 'QAM16 3/4', value: 4 },
    { label: 'QAM64 2/3', value: 5 },
    { label: 'QAM64 3/4', value: 6 }
  ];

  testOptions: any[] = [
    { label: 'Экспресс', value: 'expresstest' },
    { label: 'Полный', value: 'fulltest' }
  ];
  stationOptions: any[] = [
    { label: '10 МГц', value: 3 },
    { label: '20 МГц', value: 5 }
  ];

  cols: any[] = [
    { field: 'type', header: 'Тип теста' },
    { field: 'bandwidth', header: 'Ширина полосы' },
    { field: 'frequency', header: 'Частота' },
    { field: 'modulation', header: 'Модуляции' },
    { field: 'time', header: 'Время' },
    { field: 'buttons', header: 'Действия'}
  ];
  
  private subscription: Subscription = new Subscription();

  constructor(
    private sharedWebSocketService: SharedWebSocketService,
    private cdr: ChangeDetectorRef,
    private notificationService: NotificationService,
    private ngZone: NgZone,
    private dialog: MatDialog,
    private localStorage: StorageService,
    private testService: QueueCommunicationService,
    private router: Router,
    private settingsService: SettingsService
  ) { 
    this.massiveTests = this.testService.getTests();
  }

  @HostListener('window:beforeunload', ['$event'])
  unloadHandler(event: Event): void {
    this.localStorage.setItem('settingsData', this.settingsData);
  }
  
  ngOnInit(): void {
    const savedValue = this.localStorage.getItem('settingsData');
    if (savedValue) {
      this.pa1 = savedValue.Attenuator_PA1;
      this.pa2 = savedValue.Attenuator_PA2;
      this.splitterM3M = savedValue.splitter_to_M3M;
      this.splitterST = savedValue.splitter_straight;
      this.cable1 = savedValue.cable1;
      this.cable2 = savedValue.cable2
      this.cable3 = savedValue.cable3
    }

    this.routerSubscription = this.router.events.subscribe(event => {
      if (event instanceof NavigationStart) {
        this.localStorage.setItem('settingsData', this.settingsData);
      }
    });
    
    this.testService.tests$.subscribe(tests => {
      this.massiveTests = tests;
    });

    this.settingsService.settings$.subscribe(data => {
      if (data) {
        this.pa1 = data.Attenuator_PA1;
        this.pa2 = data.Attenuator_PA2;
        this.splitterM3M = data.splitter_to_M3M;
        this.splitterST = data.splitter_straight;
        this.cable1 = data.cable1;
        this.cable2 = data.cable2;
        this.cable3 = data.cable3;
      }
    });
  }
  ngOnDestroy() {
    this.localStorage.setItem('settingsData', this.settingsData);

    if (this.routerSubscription) {
      this.routerSubscription.unsubscribe();
    }
  }

  export class SettingsComponent implements OnInit {
  
  @ViewChild('fileUpload') fileUpload!: FileUpload;
  settingsData: any;
  parsedData: any;

  constructor(
    private fileSaveService: FileSaveService,
    private ngZone: NgZone,
    private testService: QueueCommunicationService,
    private settingsService: SettingsService
  ) {}

  ngOnInit(): void {
    this.settingsService.settings$.subscribe(data => {
      this.settingsData = data;
    });
  }

  uploadJSONWithSettings(event: any) {
    const file = event.files[0];
    const reader = new FileReader();
    reader.onload = (e: any) => {
      this.ngZone.run(() => {
        try {
          this.parsedData = JSON.parse(e.target.result);
          this.testService.loadTests(this.parsedData);

          const settingsElement = this.parsedData[this.parsedData.length - 1];
          this.settingsService.updateSettings(settingsElement);
          this.fileUpload.clear();
        } catch (error) {
          console.error('Ошибка при парсинге JSON:', error);
        }
      });
    };
    reader.readAsText(file);
  }

  downloadJSONWithSettings() {

    const jsonDataSettings = this.testService.getTests().concat(this.settingsData);
    const blob = new Blob([JSON.stringify(jsonDataSettings, null, 2)], {type: 'application/json' });
    this.fileSaveService.saveFile(blob);
   }

}