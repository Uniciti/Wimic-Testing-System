QueueTestsComponent.ts:
import { Component, EventEmitter, Output, OnDestroy } from '@angular/core';
import {NgFor} from "@angular/common";
import {FormsModule} from '@angular/forms';
import { DynamicDialogRef } from 'primeng/dynamicdialog';
import { DynamicDialogConfig } from 'primeng/dynamicdialog';


@Component({
  selector: 'app-queue-tests-form',
  standalone: true,
  imports: [NgFor, FormsModule],
  templateUrl: './queue-tests-form.component.html',
  styleUrls: ['./queue-tests-form.component.css']
})

export class QueueTestsFormComponent implements OnDestroy {
  testOptions = [{ label: 'Экспресс тест', value: 'express_test' }, { label: 'Полный тест', value: 'full_test' }];
  bandwidthOptions = [{ label: '10 МГц', value: 10 }, { label: '20 МГц', value: 20 }];

  selectedTestType: string = "express"
  selectedBandwidth: string =  "10 МГц";
  massiveTests: any[] = [];

  constructor(public ref: DynamicDialogRef, public config: DynamicDialogConfig) { }

  addTest() {
    const newTest = { testType: this.selectedTestType, bandwidth: this.selectedBandwidth };
    this.massiveTests.push(newTest);
  }

  removeTest(index: number) {
    this.massiveTests.splice(index, 1);
  }

  acceptTests() {
    this.ref.close(this.massiveTests);
  }

  close() {
    this.ref.close();
  }

  ngOnDestroy() {
    if (this.ref) {
        this.ref.close();
    }
}
}

mainTests.component.ts:
import { Component, OnInit, ChangeDetectorRef, OnDestroy,
   NgZone } from '@angular/core';
import { NgClass, NgFor } from "@angular/common";
import { FormsModule } from '@angular/forms';
import { InputNumberModule } from 'primeng/inputnumber';
import { ButtonModule } from 'primeng/button';
import { SelectButtonModule } from 'primeng/selectbutton';
import { ToastModule } from 'primeng/toast';
import { SharedWebSocketService } from '../SharedWebSocket.service';
import { Subscription, timer } from 'rxjs';
import { NotificationService } from '../Notification.service';
import { ProgressBarModule } from 'primeng/progressbar'
import { QueueTestsFormComponent } from "../queue-tests-form/queue-tests-form.component"
import { DialogService, DynamicDialogRef } from 'primeng/dynamicdialog';
import { PullTestsInterface } from '../core/interfaces/pull_tests'

@Component({
  selector: 'app-mainTests',
  standalone: true,
  imports: [
    NgClass,
    NgFor,
    FormsModule,
    InputNumberModule,
    ButtonModule,
    ProgressBarModule,
    SelectButtonModule,
    ToastModule,
    QueueTestsFormComponent
  ],
  templateUrl: './mainTests.component.html',
  styleUrls: ['./mainTests.component.css'],
  styles: [`.tab_content{height: 38rem; overflow-y: scroll;}`],
  providers: [ NotificationService, DialogService ]
})

export class mainTestsComponent implements OnInit, OnDestroy {

  loadingTest: boolean = false;
  TestProcessing: boolean = false;
  interval: any;
  modulation: number = 0;

  selectionTestType: string = "express"
  selectionBandwidth: number =  3;

  pa1: number | null = null;
  pa2: number | null = null;
  splitterM3M: number | null = null;
  splitterST: number | null = null;
  cable1: number | null = null;
  cable2: number | null = null;
  cable3: number | null = null;
  duration: number | null = null;

  pullman_tests: PullTestsInterface = {
    "modulation": "all",
    "bandwidth": `this.selectionBandwidth`,
    "frequncy": "none",
    "type": `this.selectionTestType`
  }

  massiveTests = [this.pullman_tests]
  //ref: DynamicDialogRef | null = null;

  /*
    modulation: all, bpsk1/2, qpsk3/4...
    bandwidth: 3, 5
    frequency: 1124, ...
    type: full, express
  */
  testOptions: any[] = [{ label: 'Экспресс тест', value: "express_test" },{ label: 'Полный тест', value: "full_test" }];
  stationOptions: any[] = [{ label: '10 МГц', value: 3 },{ label: '20 МГц', value: 5 }];
  
  private subscription: Subscription = new Subscription();

  constructor(
    private sharedWebSocketService: SharedWebSocketService,
    private cdr: ChangeDetectorRef,
    private notificationService: NotificationService,
    private ngZone: NgZone,
    //private renderer: Renderer2,
    private dialogService: DialogService
  ) {}

  show() {
    const ref = this.dialogService.open(QueueTestsFormComponent, {
      data: {
        tests: 'tests'
      },
      header: 'Очередь тестов',
      width: '50%',
      dismissableMask: true
    });

    ref.onClose.subscribe((tests: any[]) => {
      if (tests) {
        this.massiveTests = tests;
      }
      // this.dialogService.dialogComponentRefMap.forEach(dialog => {
      //   dialog.destroy();
      // });
      // Ensure no residual overlay or blocking elements
      // this.clearOverlays();
    });
  }

  // clearOverlays() {
  //   const overlays = document.querySelectorAll('.ui-widget-overlay');
  //   overlays.forEach(overlay => {
  //     if (overlay.parentElement) {
  //       overlay.parentElement.removeChild(overlay);
  //     }
  //   });
  // }


  ngOnInit(): void { }

  ngOnDestroy() {
    this.subscription.unsubscribe();
    // if (this.ref) {
    //   this.ref.close();
    // }
    // this.clearOverlays();
  }

  app.component.ts:
  import { Component, OnDestroy, OnInit, AfterViewInit } from '@angular/core';
import { RouterOutlet, NavigationEnd, Router } from "@angular/router";
import { NgClass } from "@angular/common";

import { HeaderComponent } from './header/header.component';
import { SidebarComponent } from './sidebar/sidebar.component';
import { DeviceStatusComponent } from './deviceStatus/deviceStatus.component';
import { mainTestsComponent } from './mainTests/mainTests.component';
import { ConnectionStatusComponent } from './ConnectionStatus/ConnectionStatus.component';
import { QueueTestsFormComponent } from './queue-tests-form/queue-tests-form.component'

import { MessageService } from 'primeng/api';
import { DynamicDialogModule, DialogService,
  DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';

import { SharedWebSocketService } from './SharedWebSocket.service';
import { ConnectionStatusService } from './core/services/ConnectionStatus.service';
import { NotificationService } from './Notification.service';
// import { QueueTestsFormService } from './queue-tests-form/queue-tests-form.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    HeaderComponent,
    NgClass,
    SidebarComponent, 
    DeviceStatusComponent, 
    mainTestsComponent,
    ConnectionStatusComponent, 
    RouterOutlet, 
    QueueTestsFormComponent,
    DynamicDialogModule
    ],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css' ],
  styles: [`
  .tab_content{height: screen;
    overflow-y: scroll;
    -ms-overflow-style: none; 
    scrollbar-width: none}
  .tab-content::-webkit-scrollbar{display: none}`
  ],
  providers: [ NotificationService,
    MessageService,
    ConnectionStatusService,
    DynamicDialogRef,
    DialogService,
    DynamicDialogConfig
  ]
})
export class AppComponent implements OnInit, OnDestroy, AfterViewInit {
  constructor(
    private sharedWebSocketService: SharedWebSocketService,
    private connectionStatusService: ConnectionStatusService,
    private notificationService: NotificationService,
    private router: Router,
  ) {}

  // private observableWebSocket: Observable<> = new Observable();
  ngOnInit() {
    this.sharedWebSocketService.connect();
    this.sharedWebSocketService.getMessages().subscribe(message_ => {
    if (message_.type === "is-connected") {
      if (message_.pingBert == false) {
        this.connectionStatusService.updateStatus("Ber", false);
        this.notificationService.showError("Беркут-ЕТ отключился...");
      }
      if (message_.pingAtt == false) {
        this.connectionStatusService.updateStatus("Att", false);
        this.notificationService.showError("Аттенюатор отключился...");
      }
      if (message_.isStat0 == false || message_.isStat1 == false) {
        this.connectionStatusService.updateStatus("Stat", false);
        this.notificationService.showError("Станции или одна из них отключились...");
      }
      if (message_.pingM3M == false) {
        this.connectionStatusService.updateStatus("M3M", false);
        this.notificationService.showError("М3М отключился...");
      }
    }})
  }

  ngAfterViewInit() {
    this.router.events.subscribe(event => {
      if (event instanceof NavigationEnd) {
        this.resetScrollPosition();
      }
    });
  }

  resetScrollPosition() {
    const tabContent = document.querySelector('.tab_content');
    if (tabContent) {
      tabContent.scrollTop = 0;
    }
  }

  ngOnDestroy() {
    this.sharedWebSocketService.disconnect();
  } 
}